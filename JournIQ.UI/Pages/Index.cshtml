@page
@using Newtonsoft.Json
@model IndexModel
@{
    ViewData["Title"] = "Dashboard";
}

<style>
    .calendar {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 0.25rem;
    }

    .day-tile {
        border-radius: 0.75rem;
        padding: 0.5rem;
        min-height: 100px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        font-size: 0.85rem;
        border: 1px solid #dee2e6;
        transition: transform 0.1s ease;
        background-color: #f8f9fa;
    }

        .day-tile:hover {
            transform: scale(1.02);
            cursor: pointer;
        }

    .day-tile-link {
        display: block;
        color: inherit;
    }

        .day-tile-link:hover .day-tile {
            transform: scale(1.02);
            box-shadow: 0 0 6px rgba(0, 0, 0, 0.1);
        }

        .day-tile-link:hover,
        .day-tile-link:hover * {
            color: inherit !important;
        }


    .day-number {
        font-size: 0.9rem;
        font-weight: 600;
        color: #999;
    }

    .week-summary {
        min-width: 130px;
        margin-left: 1rem;
        padding: 0.75rem;
        font-size: 0.85rem;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.75rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-end;
        text-align: right;
    }

    .day-empty {
        background-color: #e7ebef !important;
    }

    .small-chart {
        max-width: 60px;
        max-height: 60px;
    }
</style>
<!-- Top Row: 4 cards -->
<div class="row mb-4 g-3">
    <div class="col-md-3">
        <div class="card text-center p-3 h-100">
            <div>Total PnL</div>
            <h4>@Model.TotalNetPnL.ToString("C")</h4>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center p-3 h-100">
            <div>
                Profit Factor
                <i class="bi bi-info-circle text-muted" data-bs-toggle="tooltip" title="Profit Factor = Gross Profit / Gross Loss. A profit factor above 1 indicates a profitable strategy, with a higher number signifying better performance."></i>
            </div>
            <h4>@Model.ProfitFactor.ToString("F2")</h4>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center p-3 h-100">
            <div>
                Expectancy
                <i class="bi bi-info-circle text-muted" data-bs-toggle="tooltip" title="Expectancy = Avg Win × Win% - Avg Loss × Loss%. The average profit or loss a trader can expect to make per trade over a large number of trades."></i>
            </div>
            <h4>@Model.Expectancy.ToString("F2")</h4>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center p-3 h-100 d-flex flex-column justify-content-between align-items-center">
            <div class="text-muted small">Win vs Loss</div>
            <canvas id="winLossChart" width="60" height="60" class="small-chart"></canvas>
            <div class="fw-bold small mt-2">
                @Model.TotalWins <span class="text-success">wins</span> /
                @Model.TotalLosses <span class="text-danger">losses</span>
            </div>
        </div>
    </div>


</div>

<!-- Second Section: 2 Columns -->
<div class="row mb-4">
    <!-- Column 1: Stats -->
    <div class="col-md-6 d-flex flex-column gap-3">
        <!-- Row 1 -->
        <div class="d-flex gap-3">
            <div class="card text-center p-3 w-100">
                <div>Largest Win</div>
                <h5 class="text-success">@Model.LargestWin.ToString("C")</h5>
            </div>
            <div class="card text-center p-3 w-100">
                <div>Largest Loss</div>
                <h5 class="text-danger">@Model.LargestLoss.ToString("C")</h5>
            </div>
        </div>

        <!-- Row 2 -->
        <div class="d-flex gap-3">
            <!-- Win % -->
            <div class="card p-3 h-100 d-flex flex-row align-items-center justify-content-between">
                <div>
                    <div class="text-muted">Win %</div>
                    <div class="fw-bold small">@((Model.WinRate * 100).ToString("F0"))%</div>
                </div>
                <canvas id="winRateChart" width="60" height="60"></canvas>
            </div>
            <div class="card text-center p-3 w-100">
                <div>Avg Win / Avg Loss</div>
                <div class="d-flex align-items-center justify-content-between">
                    <small class="text-success">@Model.AvgWin.ToString("C")</small>
                    <div class="flex-grow-1 mx-2 bg-secondary rounded" style="height: 8px; position: relative;">
                        <div style="height: 8px; width:@(Model.AvgLoss == 0 ? "100%" : Math.Min(100, (Model.AvgWin / Math.Abs(Model.AvgLoss)) * 100) + "%"); background-color: #198754; border-radius: 4px;"></div>
                    </div>
                    <small class="text-danger">@Model.AvgLoss.ToString("C")</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Column 2: 21-Day Bar Chart -->
    <div class="col-md-6">
        <div class="card h-100 p-3">
            <div class="text-muted mb-2">Last 21 Days PnL</div>
            <canvas id="pnlBarChart" height="220"></canvas>
        </div>
    </div>
</div>


@{
    var weekIndex = 1;
}
@foreach (var week in Model.CalendarWeeks)
{
    <div class="d-flex mb-1">
        <div class="calendar flex-grow-1">
            @foreach (var day in week.Days)
            {
                var hasTrades = day.Trades.Any();
                var pnlClass = hasTrades
                ? day.TotalPnL > 0 ? "bg-success bg-opacity-25"
                : day.TotalPnL < 0 ? "bg-danger bg-opacity-25" : "bg-light"
                : "day-empty text-muted";

                <a href="/Trades/Index?date=@day.Date.ToString("yyyy-MM-dd")" class="day-tile-link text-decoration-none">
                    <div class="day-tile @pnlClass">
                        <div class="day-number">@day.Date.Day</div>

                        @if (hasTrades)
                        {
                            <div class="fw-bold fs-5 day-pnl" data-amount="@day.TotalPnL">
                                @day.TotalPnL.ToString("C")
                            </div>
                            <div>@day.TradeCount trade(s)</div>
                            <div>@day.AvgEfficiency().ToString("F0")% eff</div>
                        }
                    </div>
                </a>
            }
        </div>

        <!-- Weekly Summary -->
        <div class="week-summary">
            <div class="fw-bold text-muted">Week @weekIndex</div>
            @{
                var weeklyPnlClass = week.WeeklyPnL > 0 ? "text-success"
                : week.WeeklyPnL < 0 ? "text-danger"
                : "text-muted";
            }
            <div class="fw-bold fs-4 @weeklyPnlClass weekly-pnl" data-amount="@week.WeeklyPnL">
                $0.00
            </div>

            <div class="text-muted small">@week.WeeklyTradeCount trade(s)</div>
        </div>
    </div>
    weekIndex++;
}

<script>
    document.addEventListener("DOMContentLoaded", function () {

        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        const winLossCtx = document.getElementById('winLossChart').getContext('2d');

        new Chart(winLossCtx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: [@Model.TotalWins, @Model.TotalLosses],
                    backgroundColor: ['#198754', '#dc3545'],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '70%',
                plugins: {
                    legend: { display: false },
                    tooltip: { enabled: false }
                }
            }
        });

        const winRateCtx = document.getElementById('winRateChart').getContext('2d');
        new Chart(winRateCtx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: [@(Model.WinRate * 100), @(100 - Model.WinRate * 100)],
                    backgroundColor: ['#198754', '#dee2e6'],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '70%',
                plugins: {
                    legend: { display: false },
                    tooltip: { enabled: false }
                }
            }
        });

        // Weekly PnL Chart
        const pnlBarCanvas = document.getElementById('pnlBarChart');
        if (pnlBarCanvas) {
            const barCtx = pnlBarCanvas.getContext('2d');
            new Chart(barCtx, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(JsonConvert.SerializeObject(Model.RecentDaysPnL.Select(p => p.Date.ToString("MM/dd")))),
                    datasets: [{
                        label: 'PnL',
                        data: @Html.Raw(JsonConvert.SerializeObject(Model.RecentDaysPnL.Select(p => p.PnL))),
                        backgroundColor: @Html.Raw(JsonConvert.SerializeObject(
                                                  Model.RecentDaysPnL.Select(p => p.PnL >= 0 ? "#198754" : "#dc3545")
                                            ))
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: ctx => ctx.raw.toLocaleString('en-US', {
                                    style: 'currency',
                                    currency: 'USD'
                                })
                            }
                        }
                    },
                    scales: {
                        y: {
                            ticks: {
                                callback: val => '$' + val
                            }
                        }
                    }
                }
            });
        }
        


        function animatePnL(selector) {
            document.querySelectorAll(selector).forEach(el => {
                const end = parseFloat(el.dataset.amount);
                let current = 0;
                const isNegative = end < 0;
                const absEnd = Math.abs(end);
                const step = absEnd / 60;

                function update() {
                    current += step;
                    if (current >= absEnd) {
                        el.textContent = (isNegative ? '-' : '') +
                            absEnd.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
                        return;
                    }

                    el.textContent = (isNegative ? '-' : '') +
                        current.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
                    requestAnimationFrame(update);
                }

                update();
            });
        }

        animatePnL('.weekly-pnl');
        //animatePnL('.day-pnl');
    });
</script>


